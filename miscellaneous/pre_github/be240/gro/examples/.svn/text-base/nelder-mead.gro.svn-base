////////////////////////////////////////////////////////////////////////////
// 
//   gro 
// 
//   Copyright (c) 2011-2012 Eric Klavins, University of Washington
//   For more information, email klavins@uw.edu
// 
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
// 
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// 

include gro

srand(-1);

// cost function definition /////////////////////////////////////////////////////////////

fun d x . if x > 25.0 then x-25.0 else 25.0-x end;

fun wasser L .
  let n := length(L) in 
    sumlist ( map d L ) / n
  end;

// program to be optimized //////////////////////////////////////////////////////////////

program p(k) := {

  gfp := k[2];

  rate ( k[0] ) : { gfp := gfp + 1 }
  rate ( k[1]*gfp ) : { gfp := gfp - 1 }

};

include neldermead2

// initial parameter guesses ////////////////////////////////////////////////////////////
k0 := { 
  { 1, 0.1, 3     },
  { 5, 0.01, 20  },
  { 8, 0.2, 30 },
  { 4, 0.001, 100 }
};

program main() := neldermead ( wasser, 120, k0 );

start();
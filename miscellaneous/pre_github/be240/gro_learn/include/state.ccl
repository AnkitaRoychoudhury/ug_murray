////////////////////////////////////////////////////////////////////////////
//
//   ccli : The Computation and Control Language Tools
//   -------------------------------------------------
//
//   Copyright (c) 2003 Eric Klavins, California Institute of Technology
//   For more information, email klavins@caltech.edu
//
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
//

//
// State Machine Tools
// 
// Shared Variables:
//
//    q      : continuous state ( real list )
//    u      : control input ( real list )
//    active : id of the active state ( int )
//    s      : auxilliary state ( real list )
//    t      : time ( real )
//
// Make states with state ( id, g, init ), where id is an integer,
// g the controller function ( g will be called as in 'u := g q s t' )
// init is the initializer function ( init will be called when the state
// becomes active as in 's := init q s t'.
//
// Make a rule list of type [ guard := real list -> real list -> real -> bool, target := int ] list list
//                                     q            s            t
//
// Make a state machine with state_machine ( rules, initial ) where rules is a rule list and
// initial is the integer id of the initial state
//
// Compose as in 
//
//    program sm ( ... ) := state ( 1, g1, init1 ) + state ( 2, g2, init2 ) sharing q u active s t
//                          + ... + state_machine ( rules, initial ) sharing q u active s t;
// 
// Then do program system ( ... ) := sm ( ... ) + plant ( ) sharing q u t;
//

program state ( id,    // the state's unique id
                 g,    // the update function ( u := g q s t )
              init     // initial function ( s := init q s t )
              ) := {

  // to be shared
  u := {};          // output (used by plat dynamics)
  q := {};          // input (defined by plant dynamics)
  active := -1;     // id of the active state (defined by state machine)
  s := {};          // auxilliary state 
  t := 0.0;         // time

  mode := 0;
 
  mode = 0 & active = id : {
    s := init q s t,
    mode := 1
  };

  mode = 1 & active = id : {
    u := g q s t
  };

  mode = 1 & active != id : {
    mode := 0
  }

};

fun new_state_aux r active q s t .
  if r = {} then active
  else
    if (head r).guard q s t then (head r).target 
    else
      new_state_aux (tail r) active q s t
    end
  end;

fun new_state rules active q s t . new_state_aux (rules[active]) active q s t;

program state_machine ( rules, initial ) := {

  active := initial;
  s := {};
  q := {};
  t := 0.0;
  temp := active;

  true : {
    temp := new_state rules active q s t
  };

  temp != active : {
    active := temp
  } 
  
};



  


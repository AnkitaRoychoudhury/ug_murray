////////////////////////////////////////////////////////////////////////////
// 
//   gro 
// 
//   Copyright (c) 2011-2012 Eric Klavins, University of Washington
//   For more information, email klavins@uw.edu
// 
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
// 
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// 

// ///////////////////////////////////////////// 
// standard functions
// 

internal unit print ( ... ) "print";
internal unit skip () "skip";
internal unit exit () "exit";
internal int atoi ( string ) "atoi";
internal real atof ( string ) "atof";
internal string tostring ( 'a ) "tostring";
internal int length ( 'a list ) "length";
internal 'b list map_aux ( 'a -> 'b, 'a list ) "map";
fun map f L . map_aux ( f, L );

// ///////////////////////////////////////////// 
// math
// 

pi := 3.1415927;

internal real sin ( real ) "sin";
internal real cos ( real ) "cos";
internal real tan ( real ) "tan";

internal real asin ( real ) "asin";
internal real acos ( real ) "acos";
internal real atan ( real, real ) "atan";

internal real sinh ( real ) "sinh";
internal real cosh ( real ) "cosh";
internal real tanh ( real ) "tanh";

internal real asinh ( real ) "asinh";
internal real acosh ( real ) "acosh";
internal real atanh ( real ) "atanh";

internal real log ( real ) "log";
internal real log10 ( real )"log10";

internal real ceil ( real ) "ceil";
internal real floor ( real ) "floor";

internal real sqrt ( real ) "sqrt";
internal int rand ( int ) "rand";
internal unit srand ( int ) "srand"; // seeds with the time if argument is <= 0

fun rate k . k * dt > rand(100000) / 100000.0;

///////////////////////////////////////////////
// lists
// 

// 
// reverses the list x
// 
fun rev x .
  if x = {} 
    then {} 
    else rev (tail x) # { head x }
  end;

// 
// a function for zipping two lists together
// 
fun zip A B .
  if A != {} & B != {} 
    then { head A, head B } @ zip (tail A) (tail B)
    else {}
  end;

// 
// makes a list of n elements all of which are equal to default
fun makelist n default .
  if n <= 0
    then {}
    else default @ ( makelist (n-1) default )
  end;

// 
// sums a list of numbers
// 
fun sumlist vals .
  if vals = {}
    then 0
    else (head vals) + (sumlist (tail vals))
  end;

// 
// makes a table of elements by mapping f onto the list { n, n+1, ..., m-1, m }
// 
fun table f n m .
  if ( n > m ) then {}
  else
    if n = m then { f n }
    else ( f n ) @ table f (n+1) m
    end
  end;

// 
// tests for membership in a list
// 
fun member x L .
  if L = {} then
    false
  else
    if x = head L 
      then true
      else member x (tail L)
    end
  end;

// 
// removes element x from L
// 
fun remove x L .
  if L = {} then
    {}
  else
    if x = head L then
      remove x ( tail L )
    else
      (head L) @ ( remove x ( tail L ) )
    end
  end;

// 
// forms the cross product of two lists (taken as sets)
// 
fun cross A B .
  if A = {}
    then {}
    else ( map ( \ x . { head A, x } ) B ) # ( cross ( tail A ) B )
  end;

// 
// makes the list { 0, 1, ..., n-1 }
// 
fun range n . table ( \i . i ) 0 (n-1);

// 
// takes a list { x1, x2, ... } and returns { { x1 }, { x2 }, ... }
// 
fun tocol v . map ( \ x . { x } ) v;

// 
// returns L with x in for L[i] -- user must check list bounds!
// 
fun replace L i x . 
  if L = {} 
    then {}
    else if i = 0
      then x @ (tail L)
      else head L @ replace (tail L) (i-1) x
    end
  end;

